
Jupyter Server: local
'Python Interactive': Idle

[1]


import os
import numpy as np
import pandas as pd
[2]


df = pd.read_csv("fbook.csv")
df.head(5)
Type	Network Name	connection	nodes	edges	average shortest path(of subgraphs)	over-all average clusteringdegree	over-all median clusteringdegree	35% average clusteringdegree	35% median clusteringdegree	50% average clusteringdegree	50% median clusteringdegree	core number over medium	core_number average	Number of triangles	diameter	number of Communities	number of nodes in the largest community	Domination
0	undirected	1bingham82Rel	unconnected	10004	362894	2.477634	0.222889	0.183824	0.375593	0.318991	0.324402	0.273008	44.0	37.896441	7163862	NaN	9	1906	woman
1	undirected	2bowdoin47Rel	unconnected	2252	84387	2.223140	0.288719	0.268838	0.410020	0.364202	0.372620	0.333333	49.0	41.308615	2131455	NaN	7	698	man
2	undirected	3brandeis99Rel	unconnected	3898	137567	1.981479	0.262103	0.235294	0.401298	0.343668	0.356770	0.307692	43.0	37.714726	3056655	NaN	12	1077	man
3	undirected	4brown11Rel	unconnected	8600	384526	2.394555	0.217382	0.183333	0.351249	0.290967	0.305745	0.252714	56.0	46.908023	8858001	NaN	15	1856	man
4	undirected	5bucknell39Rel	unconnected	3826	158864	2.139104	0.278460	0.248184	0.413032	0.359623	0.369063	0.322638	51.0	44.236539	3981768	NaN	7	883	man
[3]


columns = df.columns.tolist()
data_train = df[[columns[i] for i in range(2, 18) if i != 15]].copy()
data_label = df[columns[-1]].copy()
[4]


data_train.head(5)
connection	nodes	edges	average shortest path(of subgraphs)	over-all average clusteringdegree	over-all median clusteringdegree	35% average clusteringdegree	35% median clusteringdegree	50% average clusteringdegree	50% median clusteringdegree	core number over medium	core_number average	Number of triangles	number of Communities	number of nodes in the largest community
0	unconnected	10004	362894	2.477634	0.222889	0.183824	0.375593	0.318991	0.324402	0.273008	44.0	37.896441	7163862	9	1906
1	unconnected	2252	84387	2.223140	0.288719	0.268838	0.410020	0.364202	0.372620	0.333333	49.0	41.308615	2131455	7	698
2	unconnected	3898	137567	1.981479	0.262103	0.235294	0.401298	0.343668	0.356770	0.307692	43.0	37.714726	3056655	12	1077
3	unconnected	8600	384526	2.394555	0.217382	0.183333	0.351249	0.290967	0.305745	0.252714	56.0	46.908023	8858001	15	1856
4	unconnected	3826	158864	2.139104	0.278460	0.248184	0.413032	0.359623	0.369063	0.322638	51.0	44.236539	3981768	7	883
[5]


data_label.head(5)
0    woman
1      man
2      man
3      man
4      man
Name: Domination, dtype: object
[6]


data_train_processed = data_train.replace("unconnected", 0)
data_train_processed = data_train_processed.replace("disconnected", 0)
data_train_processed = data_train_processed.replace("connected", 1)
[7]


data_train_processed.head(5)
connection	nodes	edges	average shortest path(of subgraphs)	over-all average clusteringdegree	over-all median clusteringdegree	35% average clusteringdegree	35% median clusteringdegree	50% average clusteringdegree	50% median clusteringdegree	core number over medium	core_number average	Number of triangles	number of Communities	number of nodes in the largest community
0	0	10004	362894	2.477634	0.222889	0.183824	0.375593	0.318991	0.324402	0.273008	44.0	37.896441	7163862	9	1906
1	0	2252	84387	2.223140	0.288719	0.268838	0.410020	0.364202	0.372620	0.333333	49.0	41.308615	2131455	7	698
2	0	3898	137567	1.981479	0.262103	0.235294	0.401298	0.343668	0.356770	0.307692	43.0	37.714726	3056655	12	1077
3	0	8600	384526	2.394555	0.217382	0.183333	0.351249	0.290967	0.305745	0.252714	56.0	46.908023	8858001	15	1856
4	0	3826	158864	2.139104	0.278460	0.248184	0.413032	0.359623	0.369063	0.322638	51.0	44.236539	3981768	7	883
[8]


data_label_processed = data_label.replace("man", 1)
data_label_processed = data_label_processed.replace("woman", 2)
data_label_processed = data_label_processed.replace("neutrality", 0)
[9]


data_label_processed.head(5)
0    2
1    1
2    1
3    1
4    1
Name: Domination, dtype: int64
[10]


from sklearn.neighbors import KNeighborsClassifier
from sklearn.model_selection import cross_val_score
[17]


total_scores = []
X_data = data_train_processed.to_numpy()
y_data = data_label_processed.to_numpy()
for _ in range(7):
    rnd = np.random.permutation(len(y_data))
    X_data = X_data[rnd]
    y_data = y_data[rnd]
    total_scores.append(cross_val_score(KNeighborsClassifier(), X_data, y_data, cv=10))
total_scores
[array([0.71428571, 1.        , 0.57142857, 0.57142857, 0.57142857,
        0.71428571, 0.85714286, 1.        , 0.71428571, 0.83333333]),
 array([1.        , 0.71428571, 0.57142857, 0.85714286, 1.        ,
        0.71428571, 0.85714286, 0.71428571, 0.57142857, 0.66666667]),
 array([0.85714286, 0.71428571, 0.57142857, 0.71428571, 0.85714286,
        0.71428571, 0.85714286, 0.85714286, 0.85714286, 0.66666667]),
 array([0.57142857, 0.85714286, 1.        , 0.71428571, 0.71428571,
        0.71428571, 0.71428571, 0.85714286, 0.71428571, 0.66666667]),
 array([1.        , 0.85714286, 0.71428571, 0.57142857, 0.71428571,
        0.85714286, 0.71428571, 0.85714286, 0.71428571, 0.83333333]),
 array([1.        , 1.        , 0.71428571, 0.42857143, 0.71428571,
        0.71428571, 0.85714286, 0.42857143, 0.85714286, 1.        ]),
 array([1.        , 0.85714286, 0.85714286, 0.71428571, 0.57142857,
        0.57142857, 0.85714286, 0.71428571, 0.85714286, 0.83333333])]
[18]


[x.mean() for x in total_scores]
[0.7547619047619047,
 0.7666666666666667,
 0.7666666666666666,
 0.7523809523809524,
 0.7833333333333333,
 0.7714285714285715,
 0.7833333333333333]



[20]



a = [x.mean() for x in total_scores]
sum(a) / len(a)
0.7683673469387754
